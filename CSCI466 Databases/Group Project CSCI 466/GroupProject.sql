DROP TABLES IF EXISTS CART_SELECT_CHECKOUT,CART_INCLUDE_INVENTORY,
                      CHECKOUT_UPDATE_INVENTORY,CHECKOUT_BUY_ORDERS,
                      ORDERS_SHIP_CUSTOMERS,CUSTOMERS_FILL_CART,CART_ENTRY,ORDERS,
                      INVENTORY,CHECKOUT,CUSTOMERS,CART,STORE;

CREATE TABLE IF NOT EXISTS STORE
(
    STORE_ID                INT(10) NOT NULL,
    STORE_NAME              VARCHAR(30) NOT NULL,

    PRIMARY KEY (STORE_ID)
);

CREATE TABLE IF NOT EXISTS CART
(
    CUSTOMER_ID             INT(10) NOT NULL,
    STORE_ID                INT(10) NOT NULL,

    PRIMARY KEY (CUSTOMER_ID),
    FOREIGN KEY (STORE_ID) REFERENCES STORE (STORE_ID)
);

CREATE TABLE IF NOT EXISTS CUSTOMERS
(
    CUSTOMER_ID             INT(10) AUTO_INCREMENT,
    STORE_ID                INT(10) NOT NULL,
    FIRST_NAME              VARCHAR(30) NOT NULL,
    LAST_NAME               VARCHAR(30) NOT NULL,
    STREET_NUMBER           INT(30) NOT NULL,
    STREET_NAME             VARCHAR(30) NOT NULL,
    APARTMENT_NAME          INT(10) NOT NULL,
    CITY                    VARCHAR(30) NOT NULL,
    STATE_                  VARCHAR(30) NOT NULL,
    ZIP_CODE                INT(10) NOT NULL,
    EMAIL                   VARCHAR(30) NOT NULL,
    PHONE_NUMBER            INT(10) NOT NULL,
    LOGIN_                  VARCHAR(30) NOT NULL,
    PASSWORD_               VARCHAR(30) NOT NULL,

    PRIMARY KEY (CUSTOMER_ID),
    FOREIGN KEY (STORE_ID) REFERENCES STORE (STORE_ID)
);

CREATE TABLE IF NOT EXISTS CHECKOUT
(
    CHECKOUT_ID             INT(10) NOT NULL AUTO_INCREMENT,
    STORE_ID                INT(10) NOT NULL NOT NULL,
    TAX_USD                 DECIMAL(50,2) NOT NULL,
    TOTAL_PRICE_USD         DECIMAL(50,2) NOT NULL,

    PRIMARY KEY (CHECKOUT_ID),
    FOREIGN KEY (STORE_ID) REFERENCES STORE (STORE_ID)
);

CREATE TABLE IF NOT EXISTS INVENTORY
(
    PART_ID                 INT(10) NOT NULL AUTO_INCREMENT,
    STORE_ID                INT(10) NOT NULL,
    RETAIL_PRICE_USD        DECIMAL(50,2) NOT NULL,
    PART_NAME               VARCHAR(30) NOT NULL,
    QUANTITY                INT(10) NOT NULL,

    PRIMARY KEY (PART_ID),
    FOREIGN KEY (STORE_ID) REFERENCES STORE (STORE_ID)
);

CREATE TABLE IF NOT EXISTS ORDERS
(
    ORDER_ID                INT(10) NOT NULL AUTO_INCREMENT,
    CUSTOMER_ID             INT(10) NOT NULL,
    ORDER_STATUS            VARCHAR(10) DEFAULT 'PROCESSING',
    PAYMENT_TYPE            VARCHAR(30) NOT NULL,
    ORDER_TOTAL_USD         VARCHAR(30) NOT NULL,
	NOTES					VARCHAR(250),

    PRIMARY KEY (ORDER_ID),
    FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMERS (CUSTOMER_ID)
);

CREATE TABLE IF NOT EXISTS CART_ENTRY
(
    ENTRY_ID                INT(10) AUTO_INCREMENT,
    CUSTOMER_ID             INT(10) NOT NULL,
    PART_ID                 INT(10) NOT NULL, 
    PRODUCT_QUANTITY        INT(10) NOT NULL,

    PRIMARY KEY (ENTRY_ID),
    FOREIGN KEY (CUSTOMER_ID) REFERENCES CART (CUSTOMER_ID),
    FOREIGN KEY (PART_ID) REFERENCES INVENTORY (PART_ID)
);

CREATE TABLE IF NOT EXISTS CUSTOMERS_FILL_CART
(
    CUSTOMER_ID             INT(10) NOT NULL,
    FILL_DATE               DATETIME NOT NULL,

    PRIMARY KEY (CUSTOMER_ID)
);

CREATE TABLE IF NOT EXISTS ORDERS_SHIP_CUSTOMERS
(
    ORDER_ID                INT(10) NOT NULL,
    CUSTOMER_ID             INT(10) NOT NULL,
	STATUS					VARCHAR(10) DEFAULT 'PROCESSING',
    SHIP_DATE               DATETIME NOT NULL,

    PRIMARY KEY (ORDER_ID, CUSTOMER_ID),
    FOREIGN KEY (ORDER_ID) REFERENCES ORDERS (ORDER_ID),
    FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMERS (CUSTOMER_ID)
);

CREATE TABLE IF NOT EXISTS CHECKOUT_BUY_ORDERS
(
    CHECKOUT_ID             INT(10) NOT NULL,
    ORDER_ID                INT(10) NOT NULL,
    CHECKOUT_DATE           DATETIME NOT NULL,

    PRIMARY KEY (CHECKOUT_ID, ORDER_ID),
    FOREIGN KEY (CHECKOUT_ID) REFERENCES CHECKOUT (CHECKOUT_ID),
    FOREIGN KEY (ORDER_ID) REFERENCES ORDERS (ORDER_ID)
);

CREATE TABLE IF NOT EXISTS CHECKOUT_UPDATE_INVENTORY
(
    CHECKOUT_ID             INT(10) NOT NULL,
    PART_ID                 INT(10) NOT NULL,
    QUANTITY                INT(10) NOT NULL,

    PRIMARY KEY (CHECKOUT_ID, PART_ID),
    FOREIGN KEY (CHECKOUT_ID) REFERENCES CHECKOUT (CHECKOUT_ID),
    FOREIGN KEY (PART_ID) REFERENCES INVENTORY (PART_ID)
);

CREATE TABLE IF NOT EXISTS CART_INCLUDE_INVENTORY
(
    CUSTOMER_ID             INT(10) NOT NULL,
    PART_ID                 INT(10) NOT NULL,
    ADD_DATE                DATETIME NOT NULL,

    PRIMARY KEY (CUSTOMER_ID, PART_ID),
    FOREIGN KEY (PART_ID) REFERENCES INVENTORY (PART_ID)
);

CREATE TABLE IF NOT EXISTS CART_SELECT_CHECKOUT
(
    CUSTOMER_ID             INT(10) NOT NULL,
    CHECKOUT_ID             INT(10) NOT NULL,
    CART_DATE               DATETIME NOT NULL,

    PRIMARY KEY (CUSTOMER_ID, CHECKOUT_ID),
    FOREIGN KEY (CHECKOUT_ID) REFERENCES CHECKOUT (CHECKOUT_ID)
);

----STORE INSERTS----
INSERT INTO STORE(STORE_ID,STORE_NAME)
    VALUES('123','CARS R US');

----PRODUCT INSERTS----
INSERT INTO INVENTORY
    (STORE_ID,RETAIL_PRICE_USD,PART_NAME,QUANTITY)
	VALUES('123','50.95','Tire','56');

INSERT INTO INVENTORY
    (STORE_ID,RETAIL_PRICE_USD,PART_NAME,QUANTITY)
	VALUES('123','212.00','Wheel','56');

INSERT INTO INVENTORY
    (STORE_ID,RETAIL_PRICE_USD,PART_NAME,QUANTITY)
	VALUES('123','119.99','Radiator','55');

INSERT INTO INVENTORY
    (STORE_ID,RETAIL_PRICE_USD,PART_NAME,QUANTITY)
	VALUES('123','89.99','Air Intake','60');

INSERT INTO INVENTORY
    (STORE_ID,RETAIL_PRICE_USD,PART_NAME,QUANTITY)
	VALUES('123','400.00','Exhaust','40');

INSERT INTO INVENTORY
    (STORE_ID,RETAIL_PRICE_USD,PART_NAME,QUANTITY)
	VALUES('123','235.95','Headers','35');

INSERT INTO INVENTORY
    (STORE_ID,RETAIL_PRICE_USD,PART_NAME,QUANTITY)
	VALUES('123','75.00','Manifold','50');

INSERT INTO INVENTORY
    (STORE_ID,RETAIL_PRICE_USD,PART_NAME,QUANTITY)
	VALUES('123','12.99','Spark Plug','200');

INSERT INTO INVENTORY
    (STORE_ID,RETAIL_PRICE_USD,PART_NAME,QUANTITY)
	VALUES('123','1600.00','Turbo','10');

INSERT INTO INVENTORY
    (STORE_ID,RETAIL_PRICE_USD,PART_NAME,QUANTITY)
	VALUES('123','6640.00','Supercharger','8');

INSERT INTO INVENTORY
    (STORE_ID,RETAIL_PRICE_USD,PART_NAME,QUANTITY)
	VALUES('123','20.00','Fans','0');
